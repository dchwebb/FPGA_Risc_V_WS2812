<?xml version="1.0" encoding="utf-8" standalone="no"?>
    <device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd" >
      <vendor>Latticsemi.com</vendor>                                       <!-- device vendor name -->
      <vendorID>Latticesemi</vendorID>                                        <!-- device vendor short name -->
      <name>LCMXO3LF_6900C</name>                                        <!-- name of part-->
      <series>MachXO3LF</series>                                         <!-- device series the device belongs to -->
      <version>1.0</version>                                          <!-- version of this description, adding CMSIS-SVD 1.1 tags -->
      <description>SOC_IP</description>

      <addressUnitBits>8</addressUnitBits>
      <width>32</width>
      <size>32</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <resetMask>0xFFFFFFFF</resetMask>

      <peripherals>
          <peripheral>
          <name>WS2812_inst</name>
          <version>1.9</version>
          <baseAddress>0x00008800</baseAddress>
          <groupName>WS2812_IP</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- STATUS: Status Register -->
            <register>
              <name>STATUS</name>
              <description>Status Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- sending: Currently transmitting colour data -->
                <field>
                  <name>sending</name>
                  <description>Currently transmitting colour data</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- CONTROL: Control Register -->
            <register>
              <name>CONTROL</name>
              <description>Control Register</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- auto_send: Automatically send after setting colour -->
                <field>
                  <name>auto_send</name>
                  <description>Automatically send after setting colour</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- send: Trigger immediate transmission -->
                <field>
                  <name>send</name>
                  <description>Trigger immediate transmission</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- COLOUR_WR: Set LED colours -->
            <register>
              <name>COLOUR_WR</name>
              <description>Set LED colours</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- colour: GRB colour value of LED -->
                <field>
                  <name>colour</name>
                  <description>GRB colour value of LED</description>
                  <bitRange>[23:0]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- led_number: Number of Led to set colour -->
                <field>
                  <name>led_number</name>
                  <description>Number of Led to set colour</description>
                  <bitRange>[31:24]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- COLOUR_RD: Read LED Colours -->
            <register>
              <name>COLOUR_RD</name>
              <description>Read LED Colours</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- colour: GRB colour value of LED -->
                <field>
                  <name>colour</name>
                  <description>GRB colour value of LED</description>
                  <bitRange>[23:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- led_number: Number of Led to read colour -->
                <field>
                  <name>led_number</name>
                  <description>Number of Led to read colour</description>
                  <bitRange>[31:24]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>cpu0_inst</name>
          <version>2.0.0</version>
          <baseAddress>0xFFFF0000</baseAddress>
          <groupName>riscv_mc</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000800</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- PIC_STATUS: Interrupt Status Register -->
            <register>
              <name>PIC_STATUS</name>
              <description>Interrupt Status Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- status: Interrupt Status -->
                <field>
                  <name>status</name>
                  <description>Interrupt Status</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- PIC_ENABLE: Interrupt Enable Register -->
            <register>
              <name>PIC_ENABLE</name>
              <description>Interrupt Enable Register</description>
              <addressOffset>0x0004</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- enable: Interrupt Enable -->
                <field>
                  <name>enable</name>
                  <description>Interrupt Enable</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- PIC_SET: Interrupt Set Register -->
            <register>
              <name>PIC_SET</name>
              <description>Interrupt Set Register</description>
              <addressOffset>0x0008</addressOffset>
              <size>3</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- set: Interrupt Set -->
                <field>
                  <name>set</name>
                  <description>Interrupt Set</description>
                  <bitRange>[2:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- PIC_POL: Interrupt Polarity Register -->
            <register>
              <name>PIC_POL</name>
              <description>Interrupt Polarity Register</description>
              <addressOffset>0x000C</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- pol: Interrupt Polarity -->
                <field>
                  <name>pol</name>
                  <description>Interrupt Polarity</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CNT_L: Timer Counter Lower Register -->
            <register>
              <name>TIMER_CNT_L</name>
              <description>Timer Counter Lower Register</description>
              <addressOffset>0x0400</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cnt_l: Lower 32 bits of 64-bit timer counter register -->
                <field>
                  <name>cnt_l</name>
                  <description>Lower 32 bits of 64-bit timer counter register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CNT_H: Timer Counter Higher Register -->
            <register>
              <name>TIMER_CNT_H</name>
              <description>Timer Counter Higher Register</description>
              <addressOffset>0x0404</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cnt_h: Higher 32 bits of 64-bit timer counter register -->
                <field>
                  <name>cnt_h</name>
                  <description>Higher 32 bits of 64-bit timer counter register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CMP_L: Timer Compare Lower Register -->
            <register>
              <name>TIMER_CMP_L</name>
              <description>Timer Compare Lower Register</description>
              <addressOffset>0x0410</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cmp_l: Lower 32 bits of 64-bit timer compare register -->
                <field>
                  <name>cmp_l</name>
                  <description>Lower 32 bits of 64-bit timer compare register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CMP_H: Timer Compare Higher Register -->
            <register>
              <name>TIMER_CMP_H</name>
              <description>Timer Compare Higher Register</description>
              <addressOffset>0x0414</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cmp_h: Higher 32 bits of 64-bit timer compare register -->
                <field>
                  <name>cmp_h</name>
                  <description>Higher 32 bits of 64-bit timer compare register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>gpio0_inst</name>
          <version>1.4.1</version>
          <baseAddress>0x00008000</baseAddress>
          <groupName>gpio</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- RD_DATA_REG: Read Data Register -->
            <register>
              <name>RD_DATA_REG</name>
              <description>Read Data Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rd_data: Read actual values of GPIO's -->
                <field>
                  <name>rd_data</name>
                  <description>Read actual values of GPIO's</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- WR_DATA_REG: Write Data Register -->
            <register>
              <name>WR_DATA_REG</name>
              <description>Write Data Register</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- wr_data: Write GPIO output register -->
                <field>
                  <name>wr_data</name>
                  <description>Write GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- SET_DATA_REG: Set Data Register -->
            <register>
              <name>SET_DATA_REG</name>
              <description>Set Data Register</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- set_data: Set GPIO output register -->
                <field>
                  <name>set_data</name>
                  <description>Set GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- CLEAR_DATA_REG: Clear Data Register -->
            <register>
              <name>CLEAR_DATA_REG</name>
              <description>Clear Data Register</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- clear_data: Clear GPIO output register -->
                <field>
                  <name>clear_data</name>
                  <description>Clear GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- DIRECTION_REG: Direction Register -->
            <register>
              <name>DIRECTION_REG</name>
              <description>Direction Register</description>
              <addressOffset>0x0010</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- direction_reg: GPIO Direction register -->
                <field>
                  <name>direction_reg</name>
                  <description>GPIO Direction register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_TYPE_REG: Interrupt Type Register -->
            <register>
              <name>INT_TYPE_REG</name>
              <description>Interrupt Type Register</description>
              <addressOffset>0x0014</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_type: Interrupt Type Cofiguration Register, 1-Edge, 0-Level -->
                <field>
                  <name>int_type</name>
                  <description>Interrupt Type Cofiguration Register, 1-Edge, 0-Level</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- INT_METHOD_REG: Interrupt Method Register -->
            <register>
              <name>INT_METHOD_REG</name>
              <description>Interrupt Method Register</description>
              <addressOffset>0x0018</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_method: Interrupt Method Register, if Interrupt Type is Edge` 1-Rising edge 0-faling edge, if Interrupt Type is Level` 1-High level, 0-Low level -->
                <field>
                  <name>int_method</name>
                  <description>Interrupt Method Register, if Interrupt Type is Edge` 1-Rising edge 0-faling edge, if Interrupt Type is Level` 1-High level, 0-Low level</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_STATUS_REG: Interrupt Status Register -->
            <register>
              <name>INT_STATUS_REG</name>
              <description>Interrupt Status Register</description>
              <addressOffset>0x001C</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_status: Interrupt Status Register, indicates interrupt status -->
                <field>
                  <name>int_status</name>
                  <description>Interrupt Status Register, indicates interrupt status</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_ENABLE_REG: Interrupt Enable Register -->
            <register>
              <name>INT_ENABLE_REG</name>
              <description>Interrupt Enable Register</description>
              <addressOffset>0x0020</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- Int_enable: Interrupt Enable Register, enables appropriate channel interrupt -->
                <field>
                  <name>Int_enable</name>
                  <description>Interrupt Enable Register, enables appropriate channel interrupt</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_SET_REG: Interrupt Set Register -->
            <register>
              <name>INT_SET_REG</name>
              <description>Interrupt Set Register</description>
              <addressOffset>0x0024</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_set: Interrupt Set Register, user can generate interrupt by writing '1' to the corresponding bit of this register -->
                <field>
                  <name>int_set</name>
                  <description>Interrupt Set Register, user can generate interrupt by writing '1' to the corresponding bit of this register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>sysmem0_inst</name>
          <version>1.0.2</version>
          <baseAddress>0x00000000</baseAddress>
          <groupName>system_memory</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00004000</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
          
          </registers>
    </peripheral>
    <peripheral>
          <name>uart0_inst</name>
          <version>1.2.0</version>
          <baseAddress>0x00008400</baseAddress>
          <groupName>uart</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- THR: Transmitter Holding Register is the interface to the Transmitter Buffer/FIFO (XMIT FIFO). -->
            <register>
              <name>THR</name>
              <description>Transmitter Holding Register is the interface to the Transmitter Buffer/FIFO (XMIT FIFO).</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- XMIT_FIFO: Write access to this field pushes data to XMIT FIFO -->
                <field>
                  <name>XMIT_FIFO</name>
                  <description>Write access to this field pushes data to XMIT FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- RBR: Receive Buffer Register is the interface to the Receiver Buffer/FIFO (RCVR FIFO). -->
            <register>
              <name>RBR</name>
              <description>Receive Buffer Register is the interface to the Receiver Buffer/FIFO (RCVR FIFO).</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- RCVR_FIFO: Read access to this field pops data from RCVR FIFO -->
                <field>
                  <name>RCVR_FIFO</name>
                  <description>Read access to this field pops data from RCVR FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- IER: Interrupt Enable Register enables the four types of UART interrupts. -->
            <register>
              <name>IER</name>
              <description>Interrupt Enable Register enables the four types of UART interrupts.</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rda_int_en: Received Data Available Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>rda_int_en</name>
                  <description>Received Data Available Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- thre_int_en: Transmitter Holding Register Empty Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>thre_int_en</name>
                  <description>Transmitter Holding Register Empty Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- rls_int_en: Receiver Line Status Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>rls_int_en</name>
                  <description>Receiver Line Status Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- IIR: Interrupt Identification Register determines the asserted interrupt based on priority. -->
            <register>
              <name>IIR</name>
              <description>Interrupt Identification Register determines the asserted interrupt based on priority.</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_pending: 0 -> Interrupt is pending according to int_prio and timeout_int. 1 -> No pending interrupt. -->
                <field>
                  <name>int_pending</name>
                  <description>0 -> Interrupt is pending according to int_prio and timeout_int. 1 -> No pending interrupt.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- int_prio: 2'b11 -> Receiver Line Status Interrupt. 2'b10 -> Received Data Available Interrupt. 2'b01 -> Transmitter Holding Register Empty Interrupt. 2'b00 -> MODEM Status Interrupt. -->
                <field>
                  <name>int_prio</name>
                  <description>2'b11 -> Receiver Line Status Interrupt. 2'b10 -> Received Data Available Interrupt. 2'b01 -> Transmitter Holding Register Empty Interrupt. 2'b00 -> MODEM Status Interrupt.</description>
                  <bitRange>[2:1]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- fifos_en: FIFO mode - Fixed to logic 2'b11. Non-FIFO mode - fixed to 2'b00. -->
                <field>
                  <name>fifos_en</name>
                  <description>FIFO mode - Fixed to logic 2'b11. Non-FIFO mode - fixed to 2'b00.</description>
                  <bitRange>[7:6]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- LCR: Line Control Register configures character length, number stop bits and parity bit. -->
            <register>
              <name>LCR</name>
              <description>Line Control Register configures character length, number stop bits and parity bit.</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- char_len_sel:  2'b00 -> 5 bits. 2'b01 -> 6 bits. 2'b10 -> 7 bits. 2'b11 -> 8 bits. -->
                <field>
                  <name>char_len_sel</name>
                  <description> 2'b00 -> 5 bits. 2'b01 -> 6 bits. 2'b10 -> 7 bits. 2'b11 -> 8 bits.</description>
                  <bitRange>[1:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- stop_bit_ctrl: 0 -> One stop bit is generated in the transmitted data. 1 -> Two stop bits are generated. -->
                <field>
                  <name>stop_bit_ctrl</name>
                  <description>0 -> One stop bit is generated in the transmitted data. 1 -> Two stop bits are generated.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- parity_en: Parity Enable. 0-> Parity generation and checking is disabled. 1-> Parity generation and checking is enabled. -->
                <field>
                  <name>parity_en</name>
                  <description>Parity Enable. 0-> Parity generation and checking is disabled. 1-> Parity generation and checking is enabled.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- even_parity_sel: Even Parity Select. 0 -> Odd parity. 1 -> Even Parity. -->
                <field>
                  <name>even_parity_sel</name>
                  <description>Even Parity Select. 0 -> Odd parity. 1 -> Even Parity.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- stick_parity_en: Stick Parity Enable. 0 -> Stick parity is disabled. 1 -> Stick parity is enabled. -->
                <field>
                  <name>stick_parity_en</name>
                  <description>Stick Parity Enable. 0 -> Stick parity is disabled. 1 -> Stick parity is enabled.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- break_ctrl_en: Break Control Enable. 0 -> Break control is disabled. 1 -> Break control is enabled. -->
                <field>
                  <name>break_ctrl_en</name>
                  <description>Break Control Enable. 0 -> Break control is disabled. 1 -> Break control is enabled.</description>
                  <bitRange>[6:6]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- LSR: Line Status Register -->
            <register>
              <name>LSR</name>
              <description>Line Status Register</description>
              <addressOffset>0x0014</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- data_rdy: Data Ready Indicator asserts when RCVR FIFO has data. -->
                <field>
                  <name>data_rdy</name>
                  <description>Data Ready Indicator asserts when RCVR FIFO has data.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- overrun_err: Overrun Error Indicator asserts when RCVR FIFO is full and the next character has been fully received. -->
                <field>
                  <name>overrun_err</name>
                  <description>Overrun Error Indicator asserts when RCVR FIFO is full and the next character has been fully received.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- parity_err: Parity Error Indicator asserts when parity error occurs. -->
                <field>
                  <name>parity_err</name>
                  <description>Parity Error Indicator asserts when parity error occurs.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- framing_err: Framing Error Indicator asserts when received data does not have a valid stop bit. -->
                <field>
                  <name>framing_err</name>
                  <description>Framing Error Indicator asserts when received data does not have a valid stop bit.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- break_cond: Break condition indicator asserts when rxd_i is held low for longer than full RX time. -->
                <field>
                  <name>break_cond</name>
                  <description>Break condition indicator asserts when rxd_i is held low for longer than full RX time.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- thr_empty: THR Empty bit asserts when XMIT FIFO is empty. -->
                <field>
                  <name>thr_empty</name>
                  <description>THR Empty bit asserts when XMIT FIFO is empty.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- xmitr_empty: Transmitter Empty bit asserts when both XMIT FIFO and Transmitter Shift Register are empty. -->
                <field>
                  <name>xmitr_empty</name>
                  <description>Transmitter Empty bit asserts when both XMIT FIFO and Transmitter Shift Register are empty.</description>
                  <bitRange>[6:6]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- DLAB_LSB: Divisor Latch Register LSB -->
            <register>
              <name>DLAB_LSB</name>
              <description>Divisor Latch Register LSB</description>
              <addressOffset>0x0020</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- divisor_lsb: The lower byte of the Divisor Latch Register. -->
                <field>
                  <name>divisor_lsb</name>
                  <description>The lower byte of the Divisor Latch Register.</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- DLAB_MSB: Divisor Latch Register MSB -->
            <register>
              <name>DLAB_MSB</name>
              <description>Divisor Latch Register MSB</description>
              <addressOffset>0x0024</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- divisor_msb: The upper byte of the Divisor Latch Register. -->
                <field>
                  <name>divisor_msb</name>
                  <description>The upper byte of the Divisor Latch Register.</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>

      </peripherals>
    </device>
